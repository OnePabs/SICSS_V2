/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package server;

import org.testng.annotations.*;
import static org.testng.Assert.*;

import server.inner_modules.SettingsController;
import server.inner_modules.StateController;

import server.enumerators.PROGRAM_STATE;

public class StateControllerTest {
	
    @Test public void testStateControllerTransitions() {
    	System.out.println();
    	System.out.println("**************************************");
    	System.out.println("Testing State Controller Transitions");
    	System.out.println("**************************************");
    	
    	//set up state controller and needed modules
    	StateController sctrl = new StateController();
    	SettingsController settingsCtrl = new SettingsController();
    	sctrl.setSttingsController(settingsCtrl);
    	
    	//verify that initial state is initial
    	assertEquals(sctrl.getCurrentState().toString(),"INITIAL");
    	System.out.println("Asserted First state is INITIAL");
    	
    	//try accessing same state (initial)
    	System.out.println("Trying to access same INITIAL state from INITIAL...");
    	sctrl.changeState(PROGRAM_STATE.INITIAL);
    	assertEquals(sctrl.getCurrentState().toString(),"INITIAL");
    	System.out.println("State is still INITIAL");
    	
    	//try accessing inaccessible states from init
    	System.out.println("Trying to access inaccessible Running state from initial...");
    	sctrl.changeState(PROGRAM_STATE.RUNNING);
    	assertEquals(sctrl.getCurrentState().toString(),"INITIAL");
    	System.out.println("State is still INITIAL");
    	System.out.println("Trying to access inaccessible STOPPED state from INITIAL...");
    	sctrl.changeState(PROGRAM_STATE.STOPPED);
    	assertEquals(sctrl.getCurrentState().toString(),"INITIAL");
    	System.out.println("State is still INITIAL");
    	
    	
    	//Go to settings state
    	System.out.println("Trying to GO to SETTINGS state from INITIAL...");
    	sctrl.changeState(PROGRAM_STATE.SETTINGS);
    	assertEquals(sctrl.getCurrentState().toString(),"SETTINGS");
    	System.out.println("State is now SETTINGS");
    	
    	//try accessing same state (settings)
    	System.out.println("Trying to access same SETTINGS state from SETTINGS...");
    	sctrl.changeState(PROGRAM_STATE.SETTINGS);
    	assertEquals(sctrl.getCurrentState().toString(),"SETTINGS");
    	System.out.println("State is still SETTINGS");
    	
    	
    	//try accessing inaccessible states from settings
    	System.out.println("Trying to access inaccessible INITIAL state from SETTINGS...");
    	sctrl.changeState(PROGRAM_STATE.INITIAL);
    	assertEquals(sctrl.getCurrentState().toString(),"SETTINGS");
    	System.out.println("State is still SETTINGS");
    	System.out.println("Trying to access inaccessible STOPPED state from SETTINGS...");
    	sctrl.changeState(PROGRAM_STATE.STOPPED);
    	assertEquals(sctrl.getCurrentState().toString(),"SETTINGS");
    	System.out.println("State is still SETTINGS");
    	
    	//Go to Running state
    	System.out.println("Trying to GO to RUNNING state from SETTINGS...");
    	sctrl.changeState(PROGRAM_STATE.RUNNING);
    	assertEquals(sctrl.getCurrentState().toString(),"RUNNING");
    	System.out.println("State is now RUNNING");
    	
    	//try accessing same state (RUNNING)
    	System.out.println("Trying to access same RUNNING state from RUNNING...");
    	sctrl.changeState(PROGRAM_STATE.RUNNING);
    	assertEquals(sctrl.getCurrentState().toString(),"RUNNING");
    	System.out.println("State is still RUNNING");
    	
    	
    	//try accessing inaccessible states from RUNNING
    	System.out.println("Trying to access inaccessible INITIAL state from RUNNING...");
    	sctrl.changeState(PROGRAM_STATE.INITIAL);
    	assertEquals(sctrl.getCurrentState().toString(),"RUNNING");
    	System.out.println("State is still RUNNING");
    	System.out.println("Trying to access inaccessible SETTINGS state from RUNNING...");
    	sctrl.changeState(PROGRAM_STATE.SETTINGS);
    	assertEquals(sctrl.getCurrentState().toString(),"RUNNING");
    	System.out.println("State is still RUNNING");
    	
    	
    	//Go to STOPPED state
    	System.out.println("Trying to GO to STOPPED state from RUNNING...");
    	sctrl.changeState(PROGRAM_STATE.STOPPED);
    	assertEquals(sctrl.getCurrentState().toString(),"STOPPED");
    	System.out.println("State is now STOPPED");
    	
    	//try accessing same state (STOPPED)
    	System.out.println("Trying to access same STOPPED state from STOPPED...");
    	sctrl.changeState(PROGRAM_STATE.STOPPED);
    	assertEquals(sctrl.getCurrentState().toString(),"STOPPED");
    	System.out.println("State is still STOPPED");
    	
    	//try accessing inaccessible states from STOPPED
    	System.out.println("Trying to access inaccessible INITIAL state from STOPPED...");
    	sctrl.changeState(PROGRAM_STATE.INITIAL);
    	assertEquals(sctrl.getCurrentState().toString(),"STOPPED");
    	System.out.println("State is still STOPPED");
    	
    	//Go to RUNNING state
    	System.out.println("Trying to GO to RUNNING state from STOPPED...");
    	sctrl.changeState(PROGRAM_STATE.RUNNING);
    	assertEquals(sctrl.getCurrentState().toString(),"RUNNING");
    	System.out.println("State is now RUNNING");
    	
    	//Go to STOPPED state
    	System.out.println("Trying to GO to STOPPED state from RUNNING...");
    	sctrl.changeState(PROGRAM_STATE.STOPPED);
    	assertEquals(sctrl.getCurrentState().toString(),"STOPPED");
    	System.out.println("State is now STOPPED");
    	
    	//Go to settings state
    	System.out.println("Trying to GO to SETTINGS state from STOPPED...");
    	sctrl.changeState(PROGRAM_STATE.SETTINGS);
    	assertEquals(sctrl.getCurrentState().toString(),"SETTINGS");
    	System.out.println("State is now SETTINGS");
    	
    	System.out.println("State Controller: all transitions were tested!");
    }
    
}
